/***Mobility Trailblazers Animation Controller*Version 2.5.29**@package MobilityTrailblazers*@since 2.5.29*/(function($){'use strict'; const MTAnimations={config:{scrollOffset: 100, parallaxSpeed: 0.5, observerThreshold: 0.1, animationClasses:['mtFadeIn', 'mtFadeInUp', 'mtFadeInDown', 'mtFadeInLeft', 'mtFadeInRight', 'mtZoomIn', 'mtZoomInBounce', 'mtRotateIn', 'mtFlipInX', 'mtFlipInY']}, init: function(){this.initScrollReveal(); this.initParallax(); this.initRippleEffect(); this.initImageEffects(); this.initStaggerAnimations(); this.initDynamicAnimations(); this.initPerformanceMonitor();}, initScrollReveal: function(){const reveals=document.querySelectorAll('.mt-scroll-reveal'); if(reveals.length===0)return; const observerOptions={threshold: this.config.observerThreshold, rootMargin: '0px 0px-50px 0px'}; const observer=new IntersectionObserver((entries)=>{entries.forEach(entry=>{if(entry.isIntersecting){entry.target.classList.add('mt-in-view'); $(entry.target).trigger('mt:revealed'); if(entry.target.dataset.revealOnce==='true'){observer.unobserve(entry.target);}}else if(!entry.target.dataset.revealOnce){entry.target.classList.remove('mt-in-view');}});}, observerOptions); reveals.forEach(element=> observer.observe(element));}, initParallax: function(){const parallaxElements=document.querySelectorAll('.mt-scroll-parallax'); if(parallaxElements.length===0)return; let ticking=false; const updateParallax=()=>{const scrolled=window.pageYOffset; parallaxElements.forEach(element=>{const speed=element.dataset.parallaxSpeed || this.config.parallaxSpeed; const yPos=-(scrolled*speed); element.style.setProperty('--parallax-offset', `${yPos}px`);}); ticking=false;}; const requestTick=()=>{if(!ticking){requestAnimationFrame(updateParallax); ticking=true;}}; window.addEventListener('scroll', requestTick);}, initRippleEffect: function(){$(document).on('mousedown', '.mt-ripple', function(e){const $this=$(this); const offset=$this.offset(); const x=e.pageX-offset.left; const y=e.pageY-offset.top; $this.css({'--ripple-x': x+'px', '--ripple-y': y+'px'});});}, initImageEffects: function(){$('.mt-image-zoom img, .mt-image-blur-to-focus img, .mt-image-grayscale img').each(function(){const img=$(this); if(img[0].complete){img.addClass('loaded');}else{img.on('load', function(){$(this).addClass('loaded');});}});}, initStaggerAnimations: function(){$('.mt-stagger-children').each(function(){const $container=$(this); const children=$container.children(); children.each(function(index){$(this).css('animation-delay',(index*0.05)+'s');});});}, initDynamicAnimations: function(){$('.mt-random-entrance').each(function(){const animations=MTAnimations.config.animationClasses; const randomAnim=animations[Math.floor(Math.random()*animations.length)]; $(this).addClass(randomAnim);}); $('.mt-chain-animation').each(function(){const $element=$(this); const animations=($element.data('animations')|| 'mtFadeIn,mtPulse').split(','); let currentIndex=0; const playNext=()=>{if(currentIndex >=animations.length){currentIndex=0;}$element.removeClass(animations.join(' ')); $element.addClass(animations[currentIndex]); currentIndex++;}; playNext(); setInterval(playNext, 2000);});}, initPerformanceMonitor: function(){if(!window.performance || !window.performance.now)return; const animatedElements=document.querySelectorAll('[class*="mt-animate"],[class*="mt-anim"]'); if(animatedElements.length > 50){}animatedElements.forEach(element=>{element.addEventListener('animationstart',(e)=>{element.dataset.animStart=performance.now();}); element.addEventListener('animationend',(e)=>{if(element.dataset.animStart){const duration=performance.now()-parseFloat(element.dataset.animStart); if(duration > 1000){}delete element.dataset.animStart;}});});}, animate: function(element, animationClass, options={}){const $element=$(element); const defaults={duration: 'normal', delay: 0, callback: null}; const settings=$.extend({}, defaults, options); this.config.animationClasses.forEach(cls=>{$element.removeClass(cls);}); $element.addClass(`mt-anim-${settings.duration}`); if(settings.delay > 0){$element.css('animation-delay', settings.delay+'s');}$element.addClass(animationClass); if(typeof settings.callback==='function'){$element.one('animationend', settings.callback);}return $element;}, stopAnimation: function(element){const $element=$(element); this.config.animationClasses.forEach(cls=>{$element.removeClass(cls);}); $element.css('animation', 'none'); return $element;}, isAnimating: function(element){const $element=$(element); return this.config.animationClasses.some(cls=>{return $element.hasClass(cls);});}, replay: function(element){const $element=$(element); const currentClasses=[]; this.config.animationClasses.forEach(cls=>{if($element.hasClass(cls)){currentClasses.push(cls);}}); $element.removeClass(currentClasses.join(' ')); setTimeout(()=>{$element.addClass(currentClasses.join(' '));}, 10); return $element;}}; $.fn.mtAnimate=function(method, ...args){if(typeof method==='string' && typeof MTAnimations[method]==='function'){return MTAnimations[method](this, ...args);}else if(typeof method==='string' && MTAnimations.config.animationClasses.includes(method)){return MTAnimations.animate(this, method, args[0]);}else{return this;}}; $(document).ready(function(){if($('body').hasClass('mt-animations-enabled')){MTAnimations.init(); window.MTAnimations=MTAnimations;}}); $(document).ajaxComplete(function(event, xhr, settings){if($('body').hasClass('mt-animations-enabled')){setTimeout(()=>{MTAnimations.initScrollReveal(); MTAnimations.initStaggerAnimations(); MTAnimations.initDynamicAnimations();}, 100);}});})(jQuery);
