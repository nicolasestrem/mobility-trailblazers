/***Mobility Trailblazers Rich Text Editor**Lightweight, bulletproof rich text editing with graceful fallback**@package MobilityTrailblazers*@since 2.5.32*/(function(window, document){'use strict'; window.MTRichEditor={config:{maxHistorySize: 50, autosaveInterval: 30000, supportedTags:['p', 'br', 'strong', 'b', 'em', 'i', 'u', 'h1', 'h2', 'h3', 'ul', 'ol', 'li', 'a', 'blockquote'], toolbarButtons:[{command: 'bold', icon: 'dashicons-editor-bold', title: 'Bold(Ctrl+B)', shortcut: 'Ctrl+B'},{command: 'italic', icon: 'dashicons-editor-italic', title: 'Italic(Ctrl+I)', shortcut: 'Ctrl+I'},{command: 'underline', icon: 'dashicons-editor-underline', title: 'Underline(Ctrl+U)', shortcut: 'Ctrl+U'},{type: 'separator'},{command: 'heading', icon: 'dashicons-heading', title: 'Heading', type: 'dropdown'},{type: 'separator'},{command: 'insertUnorderedList', icon: 'dashicons-editor-ul', title: 'Bullet List'},{command: 'insertOrderedList', icon: 'dashicons-editor-ol', title: 'Numbered List'},{type: 'separator'},{command: 'createLink', icon: 'dashicons-admin-links', title: 'Insert Link(Ctrl+K)', shortcut: 'Ctrl+K'},{command: 'unlink', icon: 'dashicons-editor-unlink', title: 'Remove Link'},{type: 'separator'},{command: 'removeFormat', icon: 'dashicons-editor-removeformatting', title: 'Clear Formatting'},{type: 'separator'},{command: 'undo', icon: 'dashicons-undo', title: 'Undo(Ctrl+Z)', shortcut: 'Ctrl+Z'},{command: 'redo', icon: 'dashicons-redo', title: 'Redo(Ctrl+Y)', shortcut: 'Ctrl+Y'}]}, editors:{}, history:{}, historyIndex:{}, isSupported: function(){return 'contentEditable' in document.body && typeof document.execCommand==='function';}, init: function(containerId, options){options=options ||{}; if(!this.isSupported()){return this.initFallback(containerId, options);}const container=document.getElementById(containerId); if(!container){return null;}const editorWrapper=this.createEditorStructure(containerId, options); container.innerHTML=''; container.appendChild(editorWrapper); const editor=editorWrapper.querySelector('.mt-rich-editor-content'); this.editors[containerId]=editor; this.history[containerId]=[]; this.historyIndex[containerId]=-1; if(options.content){editor.innerHTML=this.sanitizeHTML(options.content); this.saveHistory(containerId);}this.bindEditorEvents(containerId, editor); this.bindToolbarEvents(containerId, editorWrapper); if(options.autosave && options.onAutosave){this.startAutosave(containerId, options.onAutosave);}return editor;}, createEditorStructure: function(containerId, options){const wrapper=document.createElement('div'); wrapper.className='mt-rich-editor-wrapper'; wrapper.setAttribute('data-editor-id', containerId); const toolbar=this.createToolbar(containerId); wrapper.appendChild(toolbar); const content=document.createElement('div'); content.className='mt-rich-editor-content'; content.contentEditable=true; content.setAttribute('role', 'textbox'); content.setAttribute('aria-multiline', 'true'); content.setAttribute('aria-label', options.label || 'Rich text editor'); if(options.minHeight)content.style.minHeight=options.minHeight+'px'; if(options.maxHeight)content.style.maxHeight=options.maxHeight+'px'; wrapper.appendChild(content); const statusBar=document.createElement('div'); statusBar.className='mt-rich-editor-status'; statusBar.innerHTML='<span class="mt-char-count">0 characters</span>'; wrapper.appendChild(statusBar); return wrapper;}, createToolbar: function(containerId){const toolbar=document.createElement('div'); toolbar.className='mt-rich-editor-toolbar'; toolbar.setAttribute('role', 'toolbar'); this.config.toolbarButtons.forEach(button=>{if(button.type==='separator'){const separator=document.createElement('span'); separator.className='mt-toolbar-separator'; toolbar.appendChild(separator);}else if(button.type==='dropdown'){const dropdown=this.createDropdown(button); toolbar.appendChild(dropdown);}else{const btn=this.createToolbarButton(button); toolbar.appendChild(btn);}}); return toolbar;}, createToolbarButton: function(config){const button=document.createElement('button'); button.type='button'; button.className='mt-toolbar-button'; button.setAttribute('data-command', config.command); button.setAttribute('title', config.title); button.setAttribute('aria-label', config.title); const icon=document.createElement('span'); icon.className='dashicons '+config.icon; button.appendChild(icon); return button;}, createDropdown: function(config){const wrapper=document.createElement('div'); wrapper.className='mt-toolbar-dropdown'; const button=document.createElement('button'); button.type='button'; button.className='mt-toolbar-button mt-dropdown-toggle'; button.setAttribute('data-command', config.command); button.setAttribute('title', config.title); const icon=document.createElement('span'); icon.className='dashicons '+config.icon; button.appendChild(icon); const dropdown=document.createElement('div'); dropdown.className='mt-dropdown-menu'; dropdown.innerHTML=` <button type="button" data-heading="p">Normal Text</button> <button type="button" data-heading="h1">Heading 1</button> <button type="button" data-heading="h2">Heading 2</button> <button type="button" data-heading="h3">Heading 3</button> `; wrapper.appendChild(button); wrapper.appendChild(dropdown); return wrapper;}, bindEditorEvents: function(containerId, editor){const self=this; editor.addEventListener('input', function(){self.updateCharCount(containerId); self.saveHistory(containerId);}); editor.addEventListener('keydown', function(e){self.handleKeyboardShortcuts(e, containerId);}); editor.addEventListener('paste', function(e){self.handlePaste(e, containerId);}); editor.addEventListener('focus', function(){this.parentElement.classList.add('focused');}); editor.addEventListener('blur', function(){this.parentElement.classList.remove('focused');});}, bindToolbarEvents: function(containerId, wrapper){const self=this; const toolbar=wrapper.querySelector('.mt-rich-editor-toolbar'); toolbar.querySelectorAll('.mt-toolbar-button:not(.mt-dropdown-toggle)').forEach(button=>{button.addEventListener('click', function(e){e.preventDefault(); const command=this.getAttribute('data-command'); self.executeCommand(containerId, command);});}); toolbar.querySelectorAll('.mt-dropdown-toggle').forEach(toggle=>{toggle.addEventListener('click', function(e){e.preventDefault(); e.stopPropagation(); const dropdown=this.nextElementSibling; dropdown.classList.toggle('show');});}); toolbar.querySelectorAll('.mt-dropdown-menu button').forEach(item=>{item.addEventListener('click', function(e){e.preventDefault(); const heading=this.getAttribute('data-heading'); self.formatHeading(containerId, heading); this.parentElement.classList.remove('show');});}); document.addEventListener('click', function(){toolbar.querySelectorAll('.mt-dropdown-menu.show').forEach(menu=>{menu.classList.remove('show');});});}, executeCommand: function(containerId, command, value){const editor=this.editors[containerId]; if(!editor)return; editor.focus(); switch(command){case 'createLink': this.insertLink(containerId); break; case 'undo': this.undo(containerId); break; case 'redo': this.redo(containerId); break; case 'removeFormat': document.execCommand('removeFormat', false, null); document.execCommand('formatBlock', false, 'p'); break; default: document.execCommand(command, false, value || null);}this.saveHistory(containerId); this.updateToolbarState(containerId);}, formatHeading: function(containerId, tag){const editor=this.editors[containerId]; if(!editor)return; editor.focus(); document.execCommand('formatBlock', false, tag); this.saveHistory(containerId); this.updateToolbarState(containerId);}, insertLink: function(containerId){const url=prompt('Enter URL:', 'https: if(url && url !=='https: document.execCommand('createLink', false, url); const editor=this.editors[containerId]; const links=editor.querySelectorAll('a[href="'+url+'"]'); links.forEach(link=>{link.target='_blank'; link.rel='noopener noreferrer';});}}, handleKeyboardShortcuts: function(e, containerId){const ctrl=e.ctrlKey || e.metaKey; if(ctrl){switch(e.key.toLowerCase()){case 'b': e.preventDefault(); this.executeCommand(containerId, 'bold'); break; case 'i': e.preventDefault(); this.executeCommand(containerId, 'italic'); break; case 'u': e.preventDefault(); this.executeCommand(containerId, 'underline'); break; case 'k': e.preventDefault(); this.executeCommand(containerId, 'createLink'); break; case 'z': if(!e.shiftKey){e.preventDefault(); this.undo(containerId);}break; case 'y': e.preventDefault(); this.redo(containerId); break;}}}, handlePaste: function(e, containerId){e.preventDefault(); let text=''; if(e.clipboardData){text=e.clipboardData.getData('text/html')|| e.clipboardData.getData('text/plain');}else if(window.clipboardData){text=window.clipboardData.getData('Text');}const cleaned=this.sanitizeHTML(text); document.execCommand('insertHTML', false, cleaned); this.saveHistory(containerId);}, sanitizeHTML: function(html){const temp=document.createElement('div'); temp.innerHTML=html; temp.querySelectorAll('script, style, meta, link').forEach(el=> el.remove()); temp.querySelectorAll('*').forEach(el=>{const allowedAttrs=['href', 'target', 'rel', 'title', 'alt']; Array.from(el.attributes).forEach(attr=>{if(!allowedAttrs.includes(attr.name)&& !attr.name.startsWith('data-')){el.removeAttribute(attr.name);}}); for(let prop in el){if(prop.startsWith('on')){el[prop]=null;}}}); temp.querySelectorAll('p').forEach(p=>{if(!p.textContent.trim()&& !p.querySelector('br')){p.remove();}}); return temp.innerHTML;}, saveHistory: function(containerId){const editor=this.editors[containerId]; if(!editor)return; const content=editor.innerHTML; const history=this.history[containerId]; const index=this.historyIndex[containerId]; history.splice(index+1); history.push(content); if(history.length > this.config.maxHistorySize){history.shift();}this.historyIndex[containerId]=history.length-1;}, undo: function(containerId){const history=this.history[containerId]; let index=this.historyIndex[containerId]; if(index > 0){index--; this.historyIndex[containerId]=index; this.editors[containerId].innerHTML=history[index]; this.updateToolbarState(containerId);}}, redo: function(containerId){const history=this.history[containerId]; let index=this.historyIndex[containerId]; if(index < history.length-1){index++; this.historyIndex[containerId]=index; this.editors[containerId].innerHTML=history[index]; this.updateToolbarState(containerId);}}, updateToolbarState: function(containerId){const wrapper=document.querySelector('[data-editor-id="'+containerId+'"]'); if(!wrapper)return; const toolbar=wrapper.querySelector('.mt-rich-editor-toolbar'); toolbar.querySelectorAll('.mt-toolbar-button').forEach(button=>{const command=button.getAttribute('data-command'); if(command && command !=='undo' && command !=='redo'){const isActive=document.queryCommandState(command); button.classList.toggle('active', isActive);}}); const undoBtn=toolbar.querySelector('[data-command="undo"]'); const redoBtn=toolbar.querySelector('[data-command="redo"]'); if(undoBtn){undoBtn.disabled=this.historyIndex[containerId]<=0;}if(redoBtn){redoBtn.disabled=this.historyIndex[containerId]>=this.history[containerId].length-1;}}, updateCharCount: function(containerId){const editor=this.editors[containerId]; const wrapper=document.querySelector('[data-editor-id="'+containerId+'"]'); if(!editor || !wrapper)return; const charCount=editor.textContent.length; const counter=wrapper.querySelector('.mt-char-count'); if(counter){counter.textContent=charCount+' characters';}}, getContent: function(containerId){const editor=this.editors[containerId]; return editor ? this.sanitizeHTML(editor.innerHTML): '';}, setContent: function(containerId, content){const editor=this.editors[containerId]; if(editor){editor.innerHTML=this.sanitizeHTML(content); this.saveHistory(containerId); this.updateCharCount(containerId);}}, startAutosave: function(containerId, callback){const self=this; setInterval(function(){const content=self.getContent(containerId); if(content){callback(content);}}, this.config.autosaveInterval);}, initFallback: function(containerId, options){const container=document.getElementById(containerId); if(!container)return null; const textarea=document.createElement('textarea'); textarea.className='mt-rich-editor-fallback'; textarea.id=containerId+'-fallback'; textarea.rows=10; if(options.content){textarea.value=this.stripHTML(options.content);}container.innerHTML=''; container.appendChild(textarea); const help=document.createElement('div'); help.className='mt-editor-help'; help.innerHTML='Use**text**for bold,*text*for italic, and[text](url)for links.'; container.appendChild(help); return textarea;}, stripHTML: function(html){const temp=document.createElement('div'); temp.innerHTML=html; return temp.textContent || temp.innerText || '';}, destroy: function(containerId){delete this.editors[containerId]; delete this.history[containerId]; delete this.historyIndex[containerId]; const container=document.getElementById(containerId); if(container){container.innerHTML='';}}};})(window, document);
