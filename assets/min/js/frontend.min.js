/***Mobility Trailblazers Frontend JavaScript*Version: 2.2.3*/(function($){'use strict'; if(typeof mt_ajax==='undefined'){window.mt_ajax={ajax_url: '/wp-admin/admin-ajax.php', nonce: '', i18n:{error: 'An error occurred', success: 'Success', loading: 'Loading...', confirm: 'Are you sure?'}};}if(!mt_ajax.ajax_url){mt_ajax.ajax_url='/wp-admin/admin-ajax.php';}if(!mt_ajax.i18n){mt_ajax.i18n={};}window.getI18nText=function(key, defaultValue){if(typeof mt_ajax !=='undefined' && mt_ajax && mt_ajax.i18n && mt_ajax.i18n[key]){return mt_ajax.i18n[key];}return defaultValue || '';}; var getI18nText=window.getI18nText; window.addEventListener('error', function(e){if(window.MTErrorHandler){MTErrorHandler.logError('JavaScript Error',{message: e.message, filename: e.filename, lineno: e.lineno, colno: e.colno, stack: e.error ? e.error.stack : 'No stack trace available'});}}); window.MTErrorHandler={/***Log error to console and potentially send to server*/logError: function(message, details){var errorData={message: message, details: details ||{}, timestamp: new Date().toISOString(), url: window.location.href, userAgent: navigator.userAgent}; if(window.console && console.error){}},/***Show user-friendly error message*/showUserError: function(message, type){type=type || 'error'; var alertClass=type==='warning' ? 'mt-alert-warning' : 'mt-alert-error'; var $alert=$('<div class="mt-alert '+alertClass+'">'+'<span class="mt-alert-message">'+message+'</span>'+'<button class="mt-alert-close" type="button">&times;</button>'+'</div>'); $('.mt-alert').remove(); $('body').prepend($alert); setTimeout(function(){$alert.fadeOut(function(){$alert.remove();});}, 5000); $alert.find('.mt-alert-close').on('click', function(){$alert.fadeOut(function(){$alert.remove();});});},/***Handle AJAX errors with user-friendly messages*/handleAjaxError: function(xhr, status, error, context){var errorMessage=getI18nText('error', 'An error occurred. Please try again.'); var logDetails={status: status, error: error, responseText: xhr.responseText, context: context || 'Unknown'}; try{if(xhr.responseJSON && xhr.responseJSON.data && xhr.responseJSON.data.message){errorMessage=xhr.responseJSON.data.message;}else if(xhr.responseJSON && xhr.responseJSON.message){errorMessage=xhr.responseJSON.message;}else if(status==='timeout'){errorMessage=getI18nText('request_timeout', 'Request timed out. Please check your connection and try again.');}else if(status==='abort'){errorMessage=getI18nText('request_cancelled', 'Request was cancelled.');}else if(xhr.status===403){errorMessage=getI18nText('permission_denied', 'You do not have permission to perform this action.');}else if(xhr.status===404){errorMessage=getI18nText('resource_not_found', 'The requested resource was not found.');}else if(xhr.status >=500){errorMessage=getI18nText('server_error', 'Server error. Please try again later.');}}catch(e){logDetails.parseError=e.message;}this.logError('AJAX Error in '+context, logDetails); this.showUserError(errorMessage); return errorMessage;}}; var MTJuryDashboard={init: function(){this.bindEvents(); this.initEvaluationForm(); this.updateTotalScore(); this.initCharacterCount();}, bindEvents: function(){var self=this; $(document).on('submit', '#mt-evaluation-form', function(e){self.submitEvaluation.call(self, e);}); $(document).on('input', '.mt-score-slider', function(){self.updateScoreDisplay.call(this);}); $(document).on('click', '.mt-score-mark', function(e){self.setScoreFromMark.call(this, e);}); $(document).on('click', '.mt-evaluate-btn', function(e){self.loadEvaluation.call(self, e);}); $(document).on('input', '#mt-comments', function(){self.updateCharCount.call(this);});}, initEvaluationForm: function(){var urlParams=new URLSearchParams(window.location.search); var candidateId=urlParams.get('evaluate'); if(candidateId){this.loadEvaluationForm(candidateId);}}, loadEvaluation: function(e){e.preventDefault(); var $btn=$(this); var candidateId=$btn.data('candidate-id'); if(candidateId){this.loadEvaluationForm(candidateId);}else{this.showError(getI18nText('invalid_candidate', 'Invalid candidate ID.'));}}, loadEvaluationForm: function(candidateId){var self=this; if(typeof mt_ajax==='undefined' || !mt_ajax.nonce){MTErrorHandler.logError('mt_ajax configuration missing',{mt_ajax_defined: typeof mt_ajax !=='undefined', nonce_present: mt_ajax && mt_ajax.nonce ? true : false}); MTErrorHandler.showUserError(getI18nText('security_error', 'Security configuration error. Please refresh the page and try again.')); return;}var $container=$('.mt-jury-dashboard'); var loadingText=getI18nText('loading_evaluation', 'Loading evaluation form...'); $container.html('<div class="mt-loading">'+loadingText+'</div>'); $.post(mt_ajax.ajax_url,{action: 'mt_get_candidate_details', candidate_id: candidateId, nonce: mt_ajax.nonce}).done(function(response){if(response.success){var candidateData=response.data.data || response.data; self.displayEvaluationForm(candidateData); self.loadExistingEvaluation(candidateId);}else{self.showError(response.data.message);}}).fail(function(xhr, status, error){MTErrorHandler.handleAjaxError(xhr, status, error, 'loadEvaluationForm-candidate details');});}, displayEvaluationForm: function(candidate){var formHtml=` <div class="mt-evaluation-wrapper"> <div class="mt-candidate-details"> <h2>${candidate.name}</h2> <p class="mt-candidate-org">${candidate.organization || ''}</p> ${candidate.photo_url ? `<img src="${candidate.photo_url}" alt="${candidate.name}" class="mt-candidate-photo-eval">` : ''}<div class="mt-candidate-bio">${candidate.bio}</div> </div> <form id="mt-evaluation-form" class="mt-evaluation-form"> <input type="hidden" name="candidate_id" value="${candidate.id}"> <div class="mt-criteria-section"> <h3>Evaluation Criteria</h3> <div class="mt-criterion-card" data-criterion="courage"> <div class="mt-criterion-header"> <span class="mt-criterion-icon dashicons dashicons-superhero"></span> <h4 class="mt-criterion-label">Mut & Pioniergeist</h4> </div> <p class="mt-criterion-description">Courage & Pioneer Spirit</p> <div class="mt-score-slider-wrapper"> <input type="range" name="courage_score" class="mt-score-slider" min="0" max="10" value="5"> <div class="mt-score-marks"> <span class="mt-score-mark" data-value="0">0</span> <span class="mt-score-mark" data-value="1">1</span> <span class="mt-score-mark" data-value="2">2</span> <span class="mt-score-mark" data-value="3">3</span> <span class="mt-score-mark" data-value="4">4</span> <span class="mt-score-mark" data-value="5">5</span> <span class="mt-score-mark" data-value="6">6</span> <span class="mt-score-mark" data-value="7">7</span> <span class="mt-score-mark" data-value="8">8</span> <span class="mt-score-mark" data-value="9">9</span> <span class="mt-score-mark" data-value="10">10</span> </div> </div> <div class="mt-score-display"> <span class="mt-score-value">5</span> </div> </div> <div class="mt-criterion-card" data-criterion="innovation"> <div class="mt-criterion-header"> <span class="mt-criterion-icon dashicons dashicons-lightbulb"></span> <h4 class="mt-criterion-label">Innovationsgrad</h4> </div> <p class="mt-criterion-description">Innovation Degree</p> <div class="mt-score-slider-wrapper"> <input type="range" name="innovation_score" class="mt-score-slider" min="0" max="10" value="5"> <div class="mt-score-marks"> <span class="mt-score-mark" data-value="0">0</span> <span class="mt-score-mark" data-value="1">1</span> <span class="mt-score-mark" data-value="2">2</span> <span class="mt-score-mark" data-value="3">3</span> <span class="mt-score-mark" data-value="4">4</span> <span class="mt-score-mark" data-value="5">5</span> <span class="mt-score-mark" data-value="6">6</span> <span class="mt-score-mark" data-value="7">7</span> <span class="mt-score-mark" data-value="8">8</span> <span class="mt-score-mark" data-value="9">9</span> <span class="mt-score-mark" data-value="10">10</span> </div> </div> <div class="mt-score-display"> <span class="mt-score-value">5</span> </div> </div> <div class="mt-criterion-card" data-criterion="implementation"> <div class="mt-criterion-header"> <span class="mt-criterion-icon dashicons dashicons-hammer"></span> <h4 class="mt-criterion-label">Umsetzungskraft & Wirkung</h4> </div> <p class="mt-criterion-description">Implementation & Impact</p> <div class="mt-score-slider-wrapper"> <input type="range" name="implementation_score" class="mt-score-slider" min="0" max="10" value="5"> <div class="mt-score-marks"> <span class="mt-score-mark" data-value="0">0</span> <span class="mt-score-mark" data-value="1">1</span> <span class="mt-score-mark" data-value="2">2</span> <span class="mt-score-mark" data-value="3">3</span> <span class="mt-score-mark" data-value="4">4</span> <span class="mt-score-mark" data-value="5">5</span> <span class="mt-score-mark" data-value="6">6</span> <span class="mt-score-mark" data-value="7">7</span> <span class="mt-score-mark" data-value="8">8</span> <span class="mt-score-mark" data-value="9">9</span> <span class="mt-score-mark" data-value="10">10</span> </div> </div> <div class="mt-score-display"> <span class="mt-score-value">5</span> </div> </div> <div class="mt-criterion-card" data-criterion="relevance"> <div class="mt-criterion-header"> <span class="mt-criterion-icon dashicons dashicons-location-alt"></span> <h4 class="mt-criterion-label">Relevanz für Mobilitätswende</h4> </div> <p class="mt-criterion-description">Mobility Transformation Relevance</p> <div class="mt-score-slider-wrapper"> <input type="range" name="relevance_score" class="mt-score-slider" min="0" max="10" value="5"> <div class="mt-score-marks"> <span class="mt-score-mark" data-value="0">0</span> <span class="mt-score-mark" data-value="1">1</span> <span class="mt-score-mark" data-value="2">2</span> <span class="mt-score-mark" data-value="3">3</span> <span class="mt-score-mark" data-value="4">4</span> <span class="mt-score-mark" data-value="5">5</span> <span class="mt-score-mark" data-value="6">6</span> <span class="mt-score-mark" data-value="7">7</span> <span class="mt-score-mark" data-value="8">8</span> <span class="mt-score-mark" data-value="9">9</span> <span class="mt-score-mark" data-value="10">10</span> </div> </div> <div class="mt-score-display"> <span class="mt-score-value">5</span> </div> </div> <div class="mt-criterion-card" data-criterion="visibility"> <div class="mt-criterion-header"> <span class="mt-criterion-icon dashicons dashicons-visibility"></span> <h4 class="mt-criterion-label">Vorbildfunktion & Sichtbarkeit</h4> </div> <p class="mt-criterion-description">Role Model & Visibility</p> <div class="mt-score-slider-wrapper"> <input type="range" name="visibility_score" class="mt-score-slider" min="0" max="10" value="5"> <div class="mt-score-marks"> <span class="mt-score-mark" data-value="0">0</span> <span class="mt-score-mark" data-value="1">1</span> <span class="mt-score-mark" data-value="2">2</span> <span class="mt-score-mark" data-value="3">3</span> <span class="mt-score-mark" data-value="4">4</span> <span class="mt-score-mark" data-value="5">5</span> <span class="mt-score-mark" data-value="6">6</span> <span class="mt-score-mark" data-value="7">7</span> <span class="mt-score-mark" data-value="8">8</span> <span class="mt-score-mark" data-value="9">9</span> <span class="mt-score-mark" data-value="10">10</span> </div> </div> <div class="mt-score-display"> <span class="mt-score-value">5</span> </div> </div> </div> <div class="mt-comments-section"> <label for="mt-comments" class="mt-comments-label">${getI18nText('additional_comments', 'Additional Comments(Optional)')}</label> <textarea name="comments" id="mt-comments" class="mt-comments-textarea" rows="5"></textarea> <div class="mt-char-count"> <span id="mt-char-current">0</span>/1000 ${getI18nText('characters', 'characters')}</div> </div> <div class="mt-form-actions"> <button type="submit" class="mt-btn mt-btn-primary">${getI18nText('submit_evaluation', 'Submit Evaluation')}</button> <a href="${window.location.pathname}" class="mt-btn mt-btn-secondary">${getI18nText('back_to_dashboard', 'Back to Dashboard')}</a> </div> </form> </div> `; $('.mt-jury-dashboard').html(formHtml);}, loadExistingEvaluation: function(candidateId){if(typeof mt_ajax==='undefined' || !mt_ajax.nonce){MTJuryDashboard.showError(getI18nText('security_error', 'Security configuration error. Please refresh the page and try again.')); return;}$.post(mt_ajax.ajax_url,{action: 'mt_get_evaluation', candidate_id: candidateId, nonce: mt_ajax.nonce}).done(function(response){if(response.success && response.data.exists){var evaluation=response.data.evaluation; $('input[name="courage_score"]').val(evaluation.courage_score).trigger('input'); $('input[name="innovation_score"]').val(evaluation.innovation_score).trigger('input'); $('input[name="implementation_score"]').val(evaluation.implementation_score).trigger('input'); $('input[name="relevance_score"]').val(evaluation.relevance_score).trigger('input'); $('input[name="visibility_score"]').val(evaluation.visibility_score).trigger('input'); $('textarea[name="comments"]').val(evaluation.comments); if(evaluation.status==='completed'){$('.mt-form-actions').prepend('<div class="mt-notice mt-notice-success">'+getI18nText('evaluation_submitted_editable', 'This evaluation has been submitted. You can still edit and resubmit.')+'</div>');}}});}, updateScoreDisplay: function(){var $input=$(this); var value=$input.val(); var $card=$input.closest('.mt-criterion-card'); $card.find('.mt-score-value').text(value); var percentage=(value/10)*100; $input.css('background', 'linear-gradient(to right, #667eea 0%, #667eea '+percentage+'%, #e5e7eb '+percentage+'%, #e5e7eb 100%)'); var self=MTJuryDashboard; self.updateTotalScore();}, setScoreFromMark: function(e){e.preventDefault(); var $mark=$(this); var value=$mark.data('value'); var $slider=$mark.closest('.mt-criterion-card').find('.mt-score-slider'); $slider.val(value).trigger('input');}, updateTotalScore: function(){var total=0; var count=0; var nonZeroCount=0; var $sliders=$('.mt-score-slider'); if($sliders.length===0){$sliders=$('input[type="range"][name*="_score"]');}if($sliders.length===0){$sliders=$('input[type="number"][name*="_score"]');}if($sliders.length===0){$sliders=$('input[type="hidden"][name*="_score"]');}$sliders.each(function(){var value=parseFloat($(this).val()); if(!isNaN(value)){total+=value; count++; if(value > 0){nonZeroCount++;}}}); var average=count > 0 ?(total/count).toFixed(1): '0.0'; var $totalScore=$('#mt-total-score'); if($totalScore.length){$totalScore.text(average);}var $evaluatedCount=$('.mt-evaluated-count'); if($evaluatedCount.length){var evaluatedText='('+nonZeroCount+'/5 '+getI18nText('criteria_evaluated', 'criteria evaluated')+')'; $evaluatedCount.text(evaluatedText);}}, updateCharCount: function(){var $textarea=$(this); var length=$textarea.val().length; var maxLength=1000; $('#mt-char-current').text(length); if(length > maxLength){$textarea.val($textarea.val().substring(0, maxLength)); $('#mt-char-current').text(maxLength);}}, initCharacterCount: function(){var $textarea=$('#mt-comments'); if($textarea.length){$('#mt-char-current').text($textarea.val().length);}}, submitEvaluation: function(e){e.preventDefault(); if(typeof mt_ajax==='undefined' || !mt_ajax.nonce){MTJuryDashboard.showError(getI18nText('security_error', 'Security configuration error. Please refresh the page and try again.')); return;}var $form=$(this); var $submitBtn=$form.find('button[type="submit"]'); var isValid=true; var $scoreInputs=$('.mt-score-slider'); if($scoreInputs.length===0){$scoreInputs=$('input[name*="_score"]');}$scoreInputs.each(function(){var value=parseFloat($(this).val()); if(isNaN(value)|| value < 0 || value > 10){isValid=false; return false;}}); if(!isValid){MTJuryDashboard.showError(getI18nText('invalid_scores', 'Please ensure all scores are between 0 and 10.')); return;}var submittingText=getI18nText('submitting', 'Submitting...'); $submitBtn.prop('disabled', true).html('<span class="dashicons dashicons-update mt-spin"></span> '+submittingText); var formData={}; var $targetForm=$('#mt-evaluation-form'); if($targetForm.length===0){$targetForm=$('.mt-evaluation-form');}if($targetForm.length===0){$targetForm=$form;}$targetForm.find('input, textarea, select').each(function(){var $field=$(this); var name=$field.attr('name'); var value=$field.val(); if(name && value !==undefined){formData[name]=value;}}); formData.action='mt_submit_evaluation'; formData.nonce=mt_ajax.nonce; formData.status='completed'; $.post(mt_ajax.ajax_url, formData).done(function(response){if(response.success){var successMessage=response.data && response.data.message ? response.data.message : getI18nText('evaluation_submitted', 'Evaluation submitted successfully!'); $('.mt-evaluation-header').after('<div class="mt-notice mt-notice-success">'+successMessage+'</div>'); var $statusBadge=$('.mt-evaluation-title .mt-status-badge'); if($statusBadge.length){$statusBadge.removeClass('mt-status-draft').addClass('mt-status-completed').text(getI18nText('evaluation_submitted', 'Evaluation Submitted'));}else{$('.mt-evaluation-title').append('<span class="mt-status-badge mt-status-completed">'+getI18nText('evaluation_submitted', 'Evaluation Submitted')+'</span>');}$('html, body').animate({scrollTop: 0}, 300); $submitBtn.prop('disabled', false).html('<span class="dashicons dashicons-yes-alt"></span> '+getI18nText('submit_evaluation', 'Submit Evaluation')); setTimeout(function(){window.location.href=window.location.pathname;}, 3000);}else{var errorMessage=response.data && response.data.message ? response.data.message : getI18nText('error', 'An error occurred. Please try again.'); MTJuryDashboard.showError(errorMessage); $submitBtn.prop('disabled', false).html('<span class="dashicons dashicons-yes-alt"></span> '+getI18nText('submit_evaluation', 'Submit Evaluation'));}}).fail(function(){MTJuryDashboard.showError(getI18nText('error', 'An error occurred. Please try again.')); $submitBtn.prop('disabled', false).html('<span class="dashicons dashicons-yes-alt"></span> '+getI18nText('submit_evaluation', 'Submit Evaluation'));});}, showError: function(message){var errorHtml='<div class="mt-notice mt-notice-error">'+message+'</div>'; $('.mt-evaluation-form').before(errorHtml); $('html, body').animate({scrollTop: 0}, 300);}}; $(document).ready(function(){MTJuryDashboard.init(); setTimeout(function(){MTJuryDashboard.updateTotalScore();}, 500); $(window).on('load', function(){MTJuryDashboard.updateTotalScore();});}); if($('.mt-star-rating').length){$('.mt-star-rating').each(function(){var $rating=$(this); var $input=$rating.find('input[type="hidden"]'); var $stars=$rating.find('.mt-star'); $stars.on('click', function(){var value=$(this).data('value'); $input.val(value).trigger('change'); updateStars($rating, value);}); $stars.on('mouseenter', function(){var value=$(this).data('value'); updateStars($rating, value);}); $rating.on('mouseleave', function(){var value=$input.val()|| 0; updateStars($rating, value);});}); function updateStars($rating, value){$rating.find('.mt-star').each(function(){var starValue=$(this).data('value'); $(this).toggleClass('filled', starValue <=value);});}}$(document).on('click', '.mt-star-rating .dashicons', function(){const $star=$(this); const value=$star.data('value'); const $rating=$star.parent(); $rating.find('.dashicons').removeClass('active'); $rating.find('.dashicons').each(function(){if($(this).data('value')<=value){$(this).addClass('active');}}); $rating.find('input[type="hidden"]').val(value); updateScoreDisplay($star.closest('.mt-criterion-card'), value);});/*$(document).on('click', '.mt-score-button', function(){const $button=$(this); const value=$button.data('value'); const $group=$button.parent(); $group.find('.mt-score-button').removeClass('active'); $button.addClass('active'); $group.find('input[type="hidden"]').val(value); updateScoreDisplay($button.closest('.mt-criterion-card'), value); MTJuryDashboard.updateTotalScore();});*/$(document).on('input', '.mt-score-input', function(){const value=Math.min(10, Math.max(0, $(this).val())); $(this).val(value); updateScoreDisplay($(this).closest('.mt-criterion-card'), value);}); function updateScoreDisplay($criterion, value){$criterion.find('.mt-score-value').text(value);}jQuery(document).ready(function($){$(document).on('mt:evaluation:submitted', function(){refreshRankings();}); function refreshRankings(){if(typeof mt_ajax==='undefined' || !mt_ajax.ajax_url || !mt_ajax.nonce){return;}$.ajax({url: mt_ajax.ajax_url, type: 'POST', data:{action: 'mt_get_jury_rankings', nonce: mt_ajax.nonce, limit: 10}, success: function(response){if(response.success && response.data.html){$('#mt-rankings-container').html(response.data.html); $('.mt-ranking-item').each(function(index){$(this).css('opacity', '0').delay(index*50).animate({opacity: 1}, 300);});}}});}setInterval(refreshRankings, 60000);}); jQuery(document).ready(function($){function animateScoreRings(){$('.mt-score-ring-progress').each(function(){const $this=$(this); const offset=$this.css('stroke-dashoffset'); $this.css('stroke-dashoffset', '100'); setTimeout(()=>{$this.css('stroke-dashoffset', offset);}, 100);});}if($('.mt-rankings-section').length){animateScoreRings();}$(document).on('mouseenter', '.mt-ranking-item', function(){$(this).find('.mt-score-ring-progress').css('stroke', '#764ba2');}).on('mouseleave', function(){$(this).find('.mt-score-ring-progress').css('stroke', '#667eea');}); $(document).on('click', '.mt-ranking-item', function(){$(this).css('transform', 'scale(0.98)'); setTimeout(()=>{$(this).css('transform', '');}, 150);});}); jQuery(document).ready(function($){initializeInlineEvaluations(); function initializeInlineEvaluations(){$('.mt-score-ring-mini').each(function(){const score=$(this).data('score'); updateMiniScoreRing($(this), score);}); $(document).on('click', '.mt-score-adjust', function(e){e.preventDefault(); const $button=$(this); const $input=$button.siblings('.mt-score-input'); const action=$button.data('action'); const currentValue=parseFloat($input.val())|| 0; let newValue=currentValue; if(action==='increase' && currentValue < 10){newValue=Math.min(10, currentValue+0.5);}else if(action==='decrease' && currentValue > 0){newValue=Math.max(0, currentValue-0.5);}$input.val(newValue).trigger('change');}); $(document).on('change', '.mt-score-input', function(){const $input=$(this); const value=parseFloat($input.val())|| 0; const constrainedValue=Math.max(0, Math.min(10, value)); if(value !==constrainedValue){$input.val(constrainedValue);}const $ring=$input.closest('.mt-criterion-inline').find('.mt-score-ring-mini'); updateMiniScoreRing($ring, constrainedValue); updateTotalScorePreview($input.closest('.mt-ranking-item'));}); $(document).on('click', '.mt-btn-save-inline', function(e){e.preventDefault(); const $button=$(this); const $form=$button.closest('.mt-inline-evaluation-form'); const $rankingItem=$button.closest('.mt-ranking-item'); const candidateId=$form.data('candidate-id'); if($button.hasClass('saving')){return;}const scores={}; $form.find('.mt-score-input').each(function(){const criterion=$(this).attr('name'); const value=$(this).val(); if(criterion && value){scores[criterion]=value;}}); $button.addClass('saving'); $rankingItem.addClass('updating'); if(typeof mt_ajax==='undefined' || !mt_ajax.nonce || !mt_ajax.ajax_url){alert('Configuration error. Please refresh the page and try again.'); $rankingItem.removeClass('updating'); return;}const formData={action: 'mt_save_inline_evaluation', nonce: mt_ajax.nonce, candidate_id: candidateId, scores: scores}; $.ajax({url: mt_ajax.ajax_url, type: 'POST', data: formData, dataType: 'json', success: function(response){if(response.success){$rankingItem.removeClass('updating').addClass('success'); const totalScore=response.data.total_score; const $scoreValue=$rankingItem.find('.mt-total-score-display .score-value'); $scoreValue.text(totalScore.toFixed(1)+'/10'); $scoreValue.data('score', totalScore); updateScoreColor($scoreValue, totalScore); setTimeout(function(){refreshRankings();}, 1500); setTimeout(function(){$rankingItem.removeClass('success');}, 2000);}else{alert(response.data || 'Error saving evaluation'); $rankingItem.removeClass('updating');}}, error: function(xhr, status, error){let errorMessage='Network error. Please try again.'; try{if(xhr.responseJSON && xhr.responseJSON.data){errorMessage=xhr.responseJSON.data;}}catch(e){}alert(errorMessage); $rankingItem.removeClass('updating');}, complete: function(){$button.removeClass('saving');}});});}function updateMiniScoreRing($ring, score){const $progress=$ring.find('.mt-ring-progress'); const dashArray=(score*10)+', 100'; $progress.attr('stroke-dasharray', dashArray); $ring.attr('data-score', score); if(score >=8){$progress.css('stroke', '#22c55e');}else if(score >=6){$progress.css('stroke', '#667eea');}else if(score >=4){$progress.css('stroke', '#f59e0b');}else{$progress.css('stroke', '#ef4444');}}function updateTotalScorePreview($rankingItem){const scores=[]; $rankingItem.find('.mt-score-input').each(function(){const value=parseFloat($(this).val()); if(!isNaN(value)){scores.push(value);}}); if(scores.length > 0){const average=scores.reduce((a, b)=> a+b, 0)/scores.length; const $scoreDisplay=$rankingItem.find('.mt-total-score-display .score-value'); $scoreDisplay.text(average.toFixed(1)+'/10'); updateScoreColor($scoreDisplay, average);}}function updateScoreColor($element, score){if(score >=8){$element.css('color', '#22c55e');}else if(score >=6){$element.css('color', '#667eea');}else if(score >=4){$element.css('color', '#f59e0b');}else{$element.css('color', '#ef4444');}}function refreshRankings(){if(typeof mt_ajax==='undefined' || !mt_ajax.ajax_url || !mt_ajax.nonce){return;}const $container=$('#mt-rankings-container'); $.ajax({url: mt_ajax.ajax_url, type: 'POST', data:{action: 'mt_get_jury_rankings', nonce: mt_ajax.nonce, limit: 10}, success: function(response){if(response.success && response.data.html){const currentValues={}; $('.mt-inline-evaluation-form').each(function(){const candidateId=$(this).data('candidate-id'); currentValues[candidateId]={}; $(this).find('.mt-score-input').each(function(){const criterion=$(this).attr('name'); currentValues[candidateId][criterion]=$(this).val();});}); $container.fadeOut(300, function(){$(this).html(response.data.html).fadeIn(300, function(){initializeInlineEvaluations();});});}}, error: function(){}});}if($('.mt-rankings-section').length > 0){setInterval(refreshRankings, 30000);}});})(jQuery);(function($){$(document).ready(function(){var $table=$('.mt-evaluation-table'); if(!$table.length)return; function updateRowTotal($row){var total=0; var count=0; $row.find('.mt-eval-score-input').each(function(){var val=parseFloat($(this).val()); if(!isNaN(val)){total+=val; count++;}}); var avg=count > 0 ?(total/count): 0; $row.find('.mt-eval-total-value').text(avg.toFixed(1)); var $totalCell=$row.find('.mt-eval-total-score'); $totalCell.removeClass('score-high score-low'); if(avg >=8)$totalCell.addClass('score-high'); else if(avg <=3)$totalCell.addClass('score-low');}function updateScoreColor($input){var val=parseFloat($input.val()); $input.removeClass('score-high score-low'); if(val >=8)$input.addClass('score-high'); else if(val <=3)$input.addClass('score-low');}$table.on('input change', '.mt-eval-score-input', function(){var $input=$(this); var $row=$input.closest('tr'); updateScoreColor($input); updateRowTotal($row); $row.addClass('unsaved').removeClass('saving'); $row.find('.mt-btn-save-eval').addClass('unsaved').removeClass('saving');}); $table.on('click', '.mt-btn-save-eval', function(e){e.preventDefault(); var $btn=$(this); var $row=$btn.closest('tr'); if($btn.hasClass('saving'))return; $btn.addClass('saving').removeClass('unsaved'); $row.addClass('saving').removeClass('unsaved'); $btn.html('<span class="mt-eval-spinner"></span> '+getI18nText('saving', 'Saving...')); var candidateId=$btn.data('candidate-id'); var scores={}; $row.find('.mt-eval-score-input').each(function(){var name=$(this).attr('name'); var val=$(this).val(); scores[name]=val;}); var ajaxData={action: 'mt_save_inline_evaluation', nonce:(typeof mt_ajax !=='undefined' && mt_ajax.nonce)? mt_ajax.nonce : '', candidate_id: candidateId, scores: scores, context: 'table'}; $.ajax({url:(typeof mt_ajax !=='undefined' && mt_ajax.ajax_url)? mt_ajax.ajax_url : '', type: 'POST', data: ajaxData, dataType: 'json', success: function(response){if(response.success){$row.removeClass('unsaved saving').addClass('saved'); $btn.removeClass('saving').html('<span class="dashicons dashicons-saved"></span> '+getI18nText('saved', 'Saved')); setTimeout(function(){$btn.html('<span class="dashicons dashicons-saved"></span> '+getI18nText('save', 'Save')); $row.removeClass('saved');}, 1200); if(response.data && response.data.total_score !==undefined){$row.find('.mt-eval-total-value').text(parseFloat(response.data.total_score).toFixed(1));}}else{var errorMessage=''; if(response && response.data){if(typeof response.data==='string'){errorMessage=response.data;}else if(response.data.message){errorMessage=response.data.message;}else if(response.data.errors){errorMessage=response.data.errors.join(', ');}}errorMessage=errorMessage || getI18nText('error_saving_evaluation', 'Error saving evaluation'); $btn.removeClass('saving').addClass('unsaved').html('<span class="dashicons dashicons-warning"></span> '+getI18nText('error', 'Error')); $row.removeClass('saving').addClass('unsaved'); setTimeout(function(){$btn.html('<span class="dashicons dashicons-saved"></span> '+getI18nText('save', 'Save'));}, 2000); if(window.MTErrorHandler){MTErrorHandler.showUserError(errorMessage);}else{alert(errorMessage);}}}, error: function(xhr, status, error){$btn.removeClass('saving').addClass('unsaved').html('<span class="dashicons dashicons-warning"></span> '+getI18nText('error', 'Error')); $row.removeClass('saving').addClass('unsaved'); setTimeout(function(){$btn.html('<span class="dashicons dashicons-saved"></span> '+getI18nText('save', 'Save'));}, 2000); var errorMessage=getI18nText('network_error', 'Network error. Please try again.'); if(xhr.responseJSON && xhr.responseJSON.data){errorMessage=xhr.responseJSON.data;}else if(xhr.responseText){try{var parsed=JSON.parse(xhr.responseText); if(parsed.data){errorMessage=parsed.data;}}catch(e){}}if(window.MTErrorHandler){MTErrorHandler.handleAjaxError(xhr, status, error, 'jury-rankings-table');}else{alert(errorMessage);}}});}); $table.find('th[title]').each(function(){var $th=$(this); $th.attr('tabindex', '0'); $th.on('focus mouseenter', function(){var title=$th.attr('title'); if(!title)return; var $tip=$('<div class="mt-tooltip"></div>').text(title).appendTo('body'); var offset=$th.offset(); $tip.css({top: offset.top+$th.outerHeight()+4, left: offset.left+$th.outerWidth()/2-$tip.outerWidth()/2}); $th.data('mt-tooltip', $tip);}); $th.on('blur mouseleave', function(){var $tip=$th.data('mt-tooltip'); if($tip)$tip.remove();});}); $table.find('tbody tr').each(function(){var $row=$(this); $row.find('.mt-eval-score-input').each(function(){updateScoreColor($(this));}); updateRowTotal($row);});});})(jQuery);
